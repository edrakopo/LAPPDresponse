//
// File generated by rootcint at Sun Nov 30 22:42:56 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdIsrcdILAPPDRootDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "LAPPDRootDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void LAPPDpulse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_LAPPDpulse(void *p);
   static void deleteArray_LAPPDpulse(void *p);
   static void destruct_LAPPDpulse(void *p);
   static void streamer_LAPPDpulse(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LAPPDpulse*)
   {
      ::LAPPDpulse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LAPPDpulse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LAPPDpulse", ::LAPPDpulse::Class_Version(), "./include/LAPPDpulse.hh", 7,
                  typeid(::LAPPDpulse), DefineBehavior(ptr, ptr),
                  &::LAPPDpulse::Dictionary, isa_proxy, 0,
                  sizeof(::LAPPDpulse) );
      instance.SetDelete(&delete_LAPPDpulse);
      instance.SetDeleteArray(&deleteArray_LAPPDpulse);
      instance.SetDestructor(&destruct_LAPPDpulse);
      instance.SetStreamerFunc(&streamer_LAPPDpulse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LAPPDpulse*)
   {
      return GenerateInitInstanceLocal((::LAPPDpulse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LAPPDpulse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LAPPDpulseCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LAPPDpulseCluster(void *p = 0);
   static void *newArray_LAPPDpulseCluster(Long_t size, void *p);
   static void delete_LAPPDpulseCluster(void *p);
   static void deleteArray_LAPPDpulseCluster(void *p);
   static void destruct_LAPPDpulseCluster(void *p);
   static void streamer_LAPPDpulseCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LAPPDpulseCluster*)
   {
      ::LAPPDpulseCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LAPPDpulseCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LAPPDpulseCluster", ::LAPPDpulseCluster::Class_Version(), "./include/LAPPDpulseCluster.hh", 8,
                  typeid(::LAPPDpulseCluster), DefineBehavior(ptr, ptr),
                  &::LAPPDpulseCluster::Dictionary, isa_proxy, 0,
                  sizeof(::LAPPDpulseCluster) );
      instance.SetNew(&new_LAPPDpulseCluster);
      instance.SetNewArray(&newArray_LAPPDpulseCluster);
      instance.SetDelete(&delete_LAPPDpulseCluster);
      instance.SetDeleteArray(&deleteArray_LAPPDpulseCluster);
      instance.SetDestructor(&destruct_LAPPDpulseCluster);
      instance.SetStreamerFunc(&streamer_LAPPDpulseCluster);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LAPPDpulseCluster*)
   {
      return GenerateInitInstanceLocal((::LAPPDpulseCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LAPPDpulseCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void LAPPDresponse_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LAPPDresponse(void *p = 0);
   static void *newArray_LAPPDresponse(Long_t size, void *p);
   static void delete_LAPPDresponse(void *p);
   static void deleteArray_LAPPDresponse(void *p);
   static void destruct_LAPPDresponse(void *p);
   static void streamer_LAPPDresponse(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::LAPPDresponse*)
   {
      ::LAPPDresponse *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LAPPDresponse >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LAPPDresponse", ::LAPPDresponse::Class_Version(), "./include/LAPPDresponse.hh", 10,
                  typeid(::LAPPDresponse), DefineBehavior(ptr, ptr),
                  &::LAPPDresponse::Dictionary, isa_proxy, 0,
                  sizeof(::LAPPDresponse) );
      instance.SetNew(&new_LAPPDresponse);
      instance.SetNewArray(&newArray_LAPPDresponse);
      instance.SetDelete(&delete_LAPPDresponse);
      instance.SetDeleteArray(&deleteArray_LAPPDresponse);
      instance.SetDestructor(&destruct_LAPPDresponse);
      instance.SetStreamerFunc(&streamer_LAPPDresponse);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::LAPPDresponse*)
   {
      return GenerateInitInstanceLocal((::LAPPDresponse*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LAPPDresponse*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
atomic_TClass_ptr LAPPDpulse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LAPPDpulse::Class_Name()
{
   return "LAPPDpulse";
}

//______________________________________________________________________________
const char *LAPPDpulse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LAPPDpulse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LAPPDpulse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LAPPDpulse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr LAPPDpulseCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LAPPDpulseCluster::Class_Name()
{
   return "LAPPDpulseCluster";
}

//______________________________________________________________________________
const char *LAPPDpulseCluster::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulseCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LAPPDpulseCluster::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulseCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LAPPDpulseCluster::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulseCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LAPPDpulseCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDpulseCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr LAPPDresponse::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LAPPDresponse::Class_Name()
{
   return "LAPPDresponse";
}

//______________________________________________________________________________
const char *LAPPDresponse::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDresponse*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LAPPDresponse::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::LAPPDresponse*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LAPPDresponse::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDresponse*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LAPPDresponse::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::LAPPDresponse*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void LAPPDpulse::Streamer(TBuffer &R__b)
{
   // Stream an object of class LAPPDpulse.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void LAPPDpulse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LAPPDpulse.
      TClass *R__cl = ::LAPPDpulse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pulsetime", &_pulsetime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_lefttime", &_lefttime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_righttime", &_righttime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_peakvalue", &_peakvalue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_stripnum", &_stripnum);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_LAPPDpulse(void *p) {
      delete ((::LAPPDpulse*)p);
   }
   static void deleteArray_LAPPDpulse(void *p) {
      delete [] ((::LAPPDpulse*)p);
   }
   static void destruct_LAPPDpulse(void *p) {
      typedef ::LAPPDpulse current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_LAPPDpulse(TBuffer &buf, void *obj) {
      ((::LAPPDpulse*)obj)->::LAPPDpulse::Streamer(buf);
   }
} // end of namespace ROOT for class ::LAPPDpulse

//______________________________________________________________________________
void LAPPDpulseCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class LAPPDpulseCluster.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void LAPPDpulseCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LAPPDpulseCluster.
      TClass *R__cl = ::LAPPDpulseCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAPPDpulseList", (void*)&fLAPPDpulseList);
      R__insp.InspectMember("vector<LAPPDpulse*>", (void*)&fLAPPDpulseList, "fLAPPDpulseList.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAPPDstripPulseCount", (void*)&fLAPPDstripPulseCount);
      R__insp.InspectMember("vector<double>", (void*)&fLAPPDstripPulseCount, "fLAPPDstripPulseCount.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLAPPDstripPulseCoordinate", (void*)&fLAPPDstripPulseCoordinate);
      R__insp.InspectMember("vector<std::vector<int> >", (void*)&fLAPPDstripPulseCoordinate, "fLAPPDstripPulseCoordinate.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nchannels", &_nchannels);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LAPPDpulseCluster(void *p) {
      return  p ? new(p) ::LAPPDpulseCluster : new ::LAPPDpulseCluster;
   }
   static void *newArray_LAPPDpulseCluster(Long_t nElements, void *p) {
      return p ? new(p) ::LAPPDpulseCluster[nElements] : new ::LAPPDpulseCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_LAPPDpulseCluster(void *p) {
      delete ((::LAPPDpulseCluster*)p);
   }
   static void deleteArray_LAPPDpulseCluster(void *p) {
      delete [] ((::LAPPDpulseCluster*)p);
   }
   static void destruct_LAPPDpulseCluster(void *p) {
      typedef ::LAPPDpulseCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_LAPPDpulseCluster(TBuffer &buf, void *obj) {
      ((::LAPPDpulseCluster*)obj)->::LAPPDpulseCluster::Streamer(buf);
   }
} // end of namespace ROOT for class ::LAPPDpulseCluster

//______________________________________________________________________________
void LAPPDresponse::Streamer(TBuffer &R__b)
{
   // Stream an object of class LAPPDresponse.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void LAPPDresponse::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LAPPDresponse.
      TClass *R__cl = ::LAPPDresponse::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_freezetime", &_freezetime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_templatepulse", &_templatepulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_PHD", &_PHD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_pulsewidth", &_pulsewidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_noiselevel", &_noiselevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nsamples", &_nsamples);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_samplewidth", &_samplewidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*StripResponse_neg", &StripResponse_neg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*StripResponse_pos", &StripResponse_pos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_pulseCluster", &_pulseCluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mrand", &mrand);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_LAPPDresponse(void *p) {
      return  p ? new(p) ::LAPPDresponse : new ::LAPPDresponse;
   }
   static void *newArray_LAPPDresponse(Long_t nElements, void *p) {
      return p ? new(p) ::LAPPDresponse[nElements] : new ::LAPPDresponse[nElements];
   }
   // Wrapper around operator delete
   static void delete_LAPPDresponse(void *p) {
      delete ((::LAPPDresponse*)p);
   }
   static void deleteArray_LAPPDresponse(void *p) {
      delete [] ((::LAPPDresponse*)p);
   }
   static void destruct_LAPPDresponse(void *p) {
      typedef ::LAPPDresponse current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_LAPPDresponse(TBuffer &buf, void *obj) {
      ((::LAPPDresponse*)obj)->::LAPPDresponse::Streamer(buf);
   }
} // end of namespace ROOT for class ::LAPPDresponse

/********************************************************
* ./src/LAPPDRootDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableLAPPDRootDict();

extern "C" void G__set_cpp_environmentLAPPDRootDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("LAPPDpulse.hh");
  G__add_compiledheader("LAPPDpulseCluster.hh");
  G__add_compiledheader("LAPPDresponse.hh");
  G__cpp_reset_tagtableLAPPDRootDict();
}
#include <new>
extern "C" int G__cpp_dllrevLAPPDRootDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* LAPPDpulse */
static int G__LAPPDRootDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDpulse* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new LAPPDpulse(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) LAPPDpulse(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (int) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDpulse*) G__getstructoffset())->Getpulsetime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDpulse*) G__getstructoffset())->Getlefttime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDpulse*) G__getstructoffset())->Getrighttime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDpulse*) G__getstructoffset())->Getpeakvalue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDpulse*) G__getstructoffset())->Getstripnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LAPPDpulse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LAPPDpulse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LAPPDpulse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDpulse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDpulse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDpulse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LAPPDRootDict_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LAPPDpulse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LAPPDpulse(*(LAPPDpulse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LAPPDpulse G__TLAPPDpulse;
static int G__LAPPDRootDict_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LAPPDpulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LAPPDpulse*) (soff+(sizeof(LAPPDpulse)*i)))->~G__TLAPPDpulse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LAPPDpulse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LAPPDpulse*) (soff))->~G__TLAPPDpulse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LAPPDRootDict_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDpulse* dest = (LAPPDpulse*) G__getstructoffset();
   *dest = *(LAPPDpulse*) libp->para[0].ref;
   const LAPPDpulse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LAPPDpulseCluster */
static int G__LAPPDRootDict_451_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDpulseCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LAPPDpulseCluster[n];
     } else {
       p = new((void*) gvp) LAPPDpulseCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LAPPDpulseCluster;
     } else {
       p = new((void*) gvp) LAPPDpulseCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDpulseCluster*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDpulseCluster*) G__getstructoffset())->AddPulse((LAPPDpulse*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LAPPDpulseCluster*) G__getstructoffset())->GetNPulsesStrip((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LAPPDpulseCluster*) G__getstructoffset())->GetPulseNum((int) G__int(libp->para[0]), (int) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((LAPPDpulseCluster*) G__getstructoffset())->GetPulse((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LAPPDpulseCluster*) G__getstructoffset())->GetNPulses());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LAPPDpulseCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulseCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LAPPDpulseCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LAPPDpulseCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDpulseCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulseCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDpulseCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDpulseCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_451_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDpulseCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LAPPDRootDict_451_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LAPPDpulseCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LAPPDpulseCluster(*(LAPPDpulseCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LAPPDpulseCluster G__TLAPPDpulseCluster;
static int G__LAPPDRootDict_451_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LAPPDpulseCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LAPPDpulseCluster*) (soff+(sizeof(LAPPDpulseCluster)*i)))->~G__TLAPPDpulseCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LAPPDpulseCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LAPPDpulseCluster*) (soff))->~G__TLAPPDpulseCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LAPPDRootDict_451_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDpulseCluster* dest = (LAPPDpulseCluster*) G__getstructoffset();
   *dest = *(LAPPDpulseCluster*) libp->para[0].ref;
   const LAPPDpulseCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LAPPDresponse */
static int G__LAPPDRootDict_466_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDresponse* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LAPPDresponse[n];
     } else {
       p = new((void*) gvp) LAPPDresponse[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LAPPDresponse;
     } else {
       p = new((void*) gvp) LAPPDresponse;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDresponse*) G__getstructoffset())->AddSinglePhotonTrace((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((LAPPDresponse*) G__getstructoffset())->GetTrace((int) G__int(libp->para[0]), (int) G__int(libp->para[1])
, (double) G__double(libp->para[2]), (double) G__double(libp->para[3])
, (int) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((LAPPDresponse*) G__getstructoffset())->FindStripNumber((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((LAPPDresponse*) G__getstructoffset())->StripCoordinate((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((LAPPDresponse*) G__getstructoffset())->GetPulseCluster());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LAPPDresponse::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDresponse::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LAPPDresponse::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LAPPDresponse::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LAPPDresponse*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDresponse::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDresponse::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LAPPDresponse::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__LAPPDRootDict_466_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LAPPDresponse::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__LAPPDRootDict_466_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   LAPPDresponse* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new LAPPDresponse(*(LAPPDresponse*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LAPPDresponse G__TLAPPDresponse;
static int G__LAPPDRootDict_466_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LAPPDresponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LAPPDresponse*) (soff+(sizeof(LAPPDresponse)*i)))->~G__TLAPPDresponse();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LAPPDresponse*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LAPPDresponse*) (soff))->~G__TLAPPDresponse();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__LAPPDRootDict_466_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LAPPDresponse* dest = (LAPPDresponse*) G__getstructoffset();
   *dest = *(LAPPDresponse*) libp->para[0].ref;
   const LAPPDresponse& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* LAPPDpulse */

/* LAPPDpulseCluster */

/* LAPPDresponse */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncLAPPDRootDict {
 public:
  G__Sizep2memfuncLAPPDRootDict(): p(&G__Sizep2memfuncLAPPDRootDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncLAPPDRootDict::*p)();
};

size_t G__get_sizep2memfuncLAPPDRootDict()
{
  G__Sizep2memfuncLAPPDRootDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceLAPPDRootDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse))) {
     LAPPDpulse *G__Lderived;
     G__Lderived=(LAPPDpulse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse),G__get_linked_tagnum(&G__LAPPDRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster))) {
     LAPPDpulseCluster *G__Lderived;
     G__Lderived=(LAPPDpulseCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster),G__get_linked_tagnum(&G__LAPPDRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse))) {
     LAPPDresponse *G__Lderived;
     G__Lderived=(LAPPDresponse*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse),G__get_linked_tagnum(&G__LAPPDRootDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableLAPPDRootDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<LAPPDpulse*>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::vector<int> >",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int> >",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* LAPPDpulse */
static void G__setup_memvarLAPPDpulse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse));
   { LAPPDpulse *p; p=(LAPPDpulse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_pulsetime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_lefttime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_righttime=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_peakvalue=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_stripnum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LAPPDpulseCluster */
static void G__setup_memvarLAPPDpulseCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster));
   { LAPPDpulseCluster *p; p=(LAPPDpulseCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR),G__defined_typename("vector<LAPPDpulse*>"),-1,4,"fLAPPDpulseList=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"fLAPPDstripPulseCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR),G__defined_typename("vector<std::vector<int> >"),-1,4,"fLAPPDstripPulseCoordinate=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nchannels=",0,"number of uniques channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LAPPDresponse */
static void G__setup_memvarLAPPDresponse(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse));
   { LAPPDresponse *p; p=(LAPPDresponse*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_freezetime=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D),-1,-1,4,"_templatepulse=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D),-1,-1,4,"_PHD=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D),-1,-1,4,"_pulsewidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_noiselevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"_nsamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_samplewidth=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D),-1,-1,4,"StripResponse_neg=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D),-1,-1,4,"StripResponse_pos=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster),-1,-1,4,"_pulseCluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TRandom3),-1,-1,4,"mrand=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarLAPPDRootDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncLAPPDpulse(void) {
   /* LAPPDpulse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse));
   G__memfunc_setup("LAPPDpulse",922,G__LAPPDRootDict_215_0_1, 105, G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse), -1, 0, 5, 1, 1, 0, 
"d - - 0 - plusetime d - - 0 - lefttime "
"d - - 0 - righttime d - - 0 - peakvalue "
"i - - 0 - stripnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getpulsetime",1272,G__LAPPDRootDict_215_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getlefttime",1146,G__LAPPDRootDict_215_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getrighttime",1261,G__LAPPDRootDict_215_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getpeakvalue",1246,G__LAPPDRootDict_215_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Getstripnum",1186,G__LAPPDRootDict_215_0_6, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__LAPPDRootDict_215_0_7, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LAPPDpulse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__LAPPDRootDict_215_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__LAPPDRootDict_215_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LAPPDpulse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__LAPPDRootDict_215_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LAPPDpulse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__LAPPDRootDict_215_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__LAPPDRootDict_215_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__LAPPDRootDict_215_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDpulse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__LAPPDRootDict_215_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__LAPPDRootDict_215_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDpulse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LAPPDpulse", 922, G__LAPPDRootDict_215_0_19, (int) ('i'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse), -1, 0, 1, 1, 1, 0, "u 'LAPPDpulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LAPPDpulse", 1048, G__LAPPDRootDict_215_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LAPPDRootDict_215_0_21, (int) ('u'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse), -1, 1, 1, 1, 1, 0, "u 'LAPPDpulse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLAPPDpulseCluster(void) {
   /* LAPPDpulseCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster));
   G__memfunc_setup("LAPPDpulseCluster",1660,G__LAPPDRootDict_451_0_1, 105, G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__LAPPDRootDict_451_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPulse",786,G__LAPPDRootDict_451_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'LAPPDpulse' - 0 - pulse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPulsesStrip",1532,G__LAPPDRootDict_451_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - stripnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseNum",1113,G__LAPPDRootDict_451_0_5, 105, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - stripnum i - - 0 - pulsenum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulse",809,G__LAPPDRootDict_451_0_6, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulse), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNPulses",1002,G__LAPPDRootDict_451_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__LAPPDRootDict_451_0_8, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LAPPDpulseCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__LAPPDRootDict_451_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulseCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__LAPPDRootDict_451_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LAPPDpulseCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__LAPPDRootDict_451_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LAPPDpulseCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__LAPPDRootDict_451_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__LAPPDRootDict_451_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulseCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__LAPPDRootDict_451_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDpulseCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__LAPPDRootDict_451_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDpulseCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__LAPPDRootDict_451_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDpulseCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LAPPDpulseCluster", 1660, G__LAPPDRootDict_451_0_20, (int) ('i'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster), -1, 0, 1, 1, 1, 0, "u 'LAPPDpulseCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LAPPDpulseCluster", 1786, G__LAPPDRootDict_451_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LAPPDRootDict_451_0_22, (int) ('u'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster), -1, 1, 1, 1, 1, 0, "u 'LAPPDpulseCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLAPPDresponse(void) {
   /* LAPPDresponse */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse));
   G__memfunc_setup("LAPPDresponse",1248,G__LAPPDRootDict_466_0_1, 105, G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddSinglePhotonTrace",2002,G__LAPPDRootDict_466_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - - 0 - trans d - - 0 - para "
"d - - 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrace",783,G__LAPPDRootDict_466_0_3, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TH1D), -1, 0, 5, 1, 1, 0, 
"i - - 0 - CHnumber i - - 0 - parity "
"d - - 0 - starttime d - - 0 - samplesize "
"i - - 0 - numsamples", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindStripNumber",1532,G__LAPPDRootDict_466_0_4, 105, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StripCoordinate",1562,G__LAPPDRootDict_466_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - stripnumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPulseCluster",1547,G__LAPPDRootDict_466_0_6, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDpulseCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindNearestStrip",1637,(G__InterfaceMethod) NULL, 105, -1, -1, 0, 1, 1, 4, 0, "d - - 0 - trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TransStripCenter",1659,(G__InterfaceMethod) NULL, 100, -1, -1, 0, 1, 1, 4, 0, "i - - 0 - CHnum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__LAPPDRootDict_466_0_9, 85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LAPPDresponse::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__LAPPDRootDict_466_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDresponse::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__LAPPDRootDict_466_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LAPPDresponse::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__LAPPDRootDict_466_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LAPPDresponse::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__LAPPDRootDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__LAPPDRootDict_466_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__LAPPDRootDict_466_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDresponse::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__LAPPDRootDict_466_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDresponse::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__LAPPDRootDict_466_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LAPPDresponse::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__LAPPDRootDict_466_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LAPPDresponse::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("LAPPDresponse", 1248, G__LAPPDRootDict_466_0_21, (int) ('i'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse), -1, 0, 1, 1, 1, 0, "u 'LAPPDresponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~LAPPDresponse", 1374, G__LAPPDRootDict_466_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__LAPPDRootDict_466_0_23, (int) ('u'), G__get_linked_tagnum(&G__LAPPDRootDictLN_LAPPDresponse), -1, 1, 1, 1, 1, 0, "u 'LAPPDresponse' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncLAPPDRootDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalLAPPDRootDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcLAPPDRootDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__LAPPDRootDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_LAPPDpulse = { "LAPPDpulse" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_LAPPDpulseCluster = { "LAPPDpulseCluster" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR = { "vector<LAPPDpulse*,allocator<LAPPDpulse*> >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_reverse_iteratorlEvectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<LAPPDpulse*,allocator<LAPPDpulse*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR = { "vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<int,allocator<int> >,allocator<vector<int,allocator<int> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__LAPPDRootDictLN_LAPPDresponse = { "LAPPDresponse" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableLAPPDRootDict() {
  G__LAPPDRootDictLN_TClass.tagnum = -1 ;
  G__LAPPDRootDictLN_TBuffer.tagnum = -1 ;
  G__LAPPDRootDictLN_TMemberInspector.tagnum = -1 ;
  G__LAPPDRootDictLN_TObject.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LAPPDRootDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__LAPPDRootDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__LAPPDRootDictLN_TH1D.tagnum = -1 ;
  G__LAPPDRootDictLN_LAPPDpulse.tagnum = -1 ;
  G__LAPPDRootDictLN_LAPPDpulseCluster.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_reverse_iteratorlEvectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR.tagnum = -1 ;
  G__LAPPDRootDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__LAPPDRootDictLN_TRandom3.tagnum = -1 ;
  G__LAPPDRootDictLN_LAPPDresponse.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableLAPPDRootDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TH1D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_LAPPDpulse),sizeof(LAPPDpulse),-1,62464,(char*)NULL,G__setup_memvarLAPPDpulse,G__setup_memfuncLAPPDpulse);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_LAPPDpulseCluster),sizeof(LAPPDpulseCluster),-1,29952,(char*)NULL,G__setup_memvarLAPPDpulseCluster,G__setup_memfuncLAPPDpulseCluster);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlELAPPDpulsemUcOallocatorlELAPPDpulsemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_vectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_reverse_iteratorlEvectorlEvectorlEintcOallocatorlEintgRsPgRcOallocatorlEvectorlEintcOallocatorlEintgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__LAPPDRootDictLN_LAPPDresponse),sizeof(LAPPDresponse),-1,29952,(char*)NULL,G__setup_memvarLAPPDresponse,G__setup_memfuncLAPPDresponse);
}
extern "C" void G__cpp_setupLAPPDRootDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupLAPPDRootDict()");
  G__set_cpp_environmentLAPPDRootDict();
  G__cpp_setup_tagtableLAPPDRootDict();

  G__cpp_setup_inheritanceLAPPDRootDict();

  G__cpp_setup_typetableLAPPDRootDict();

  G__cpp_setup_memvarLAPPDRootDict();

  G__cpp_setup_memfuncLAPPDRootDict();
  G__cpp_setup_globalLAPPDRootDict();
  G__cpp_setup_funcLAPPDRootDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncLAPPDRootDict();
  return;
}
class G__cpp_setup_initLAPPDRootDict {
  public:
    G__cpp_setup_initLAPPDRootDict() { G__add_setup_func("LAPPDRootDict",(G__incsetup)(&G__cpp_setupLAPPDRootDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initLAPPDRootDict() { G__remove_setup_func("LAPPDRootDict"); }
};
G__cpp_setup_initLAPPDRootDict G__cpp_setup_initializerLAPPDRootDict;

